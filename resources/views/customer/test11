<x-customernav>
    <link rel="stylesheet" href="{{asset('build/assets/css/main_v2-built.645e5822f3.v2.css')}}">
    
        <style>
            /* General styles */
            .chat-app-container {
                display: flex;
                width: auto;
                height: 100vh;
                margin-bottom: auto;
            }
    
            /* Chat list */
            .chat-list {
                align-items: flex-start;
                width: 25%;
                background-color: #2c3e50;
                color: #ecf0f1;
                overflow-y: auto;
                padding: 10px;
                
            }
    
            .chat-list h2 {
                text-align: center;
            }
    
            .chat-item {
                padding: 10px;
                cursor: pointer;
                border-radius: 5px;
                display: flex;
                align-items: center;
                gap: 10px;
                transition: background-color 0.3s;
                justify-content: space-between;
            }
    
            .chat-item.active, .chat-item:hover {
                background-color: #34495e;
            }
    
            /* Chat window */
            .chat-window-container {
                width: 75%;
                display: flex;
                flex-direction: column;
            }
    
            /* Make the chat header sticky */
            .chat-header {
                padding: 15px;
                background-color: #3498db;
                color: white;
                font-size: 20px;
                position: sticky;
                top: 0;
                z-index: 10; /* Ensures the header stays on top */
            }
    
            .chat-window {
                flex: 1;
                padding: 20px;
                overflow-y: auto;
                background-color: #ffffff;
                display: flex;
                flex-direction: column;
            }
    
            .message-container {
                display: flex;
                justify-content: space-between;
                margin: 10px 0;
            }
    
            .message {
                max-width: 48%;
                padding: 10px;
                border-radius: 5px;
            }
    
            .customer {
                background-color: #3498db;
                color: white;
                align-self: flex-end;
            }
    
            .expert {
                background-color: #2ecc71;
                color: white;
                align-self: flex-start;
            }
    
            .timestamp {
                font-size: 12px;
                color: #7f8c8d;
                margin-top: 5px;
            }
    
            .chat-input {
                display: flex;
                padding: 10px;
                background-color: #bdc3c7;
            }
    
            .chat-input input {
                flex: 1;
                padding: 10px;
                border-radius: 5px;
                border: 1px solid #ccc;
                margin-right: 10px;
            }
    
            .chat-input button {
                padding: 10px 20px;
                background-color: #3498db;
                color: white;
                border: none;
                border-radius: 5px;
                cursor: pointer;
            }
    
            .chat-input button:hover {
                background-color: #2980b9;
            }
        </style>
    
    <div class="chat-app-container">
        <!-- Chat list -->
        <div class="chat-list">
            <h2>Chats</h2>
            <div class="chat-item active" data-chat-id="1">John Doe <span class="timestamp"></span></div>
            <div class="chat-item" data-chat-id="2">Jane Smith <span class="timestamp"></span></div>
            <div class="chat-item" data-chat-id="3">Alex Johnson <span class="timestamp"></span></div>
        </div>
    
        <!-- Chat window -->
        <div class="chat-window-container">
            <div class="chat-header" id="chat-header">John Doe</div>
            <div class="chat-window" id="chat-window"></div>
            <div class="chat-input">
                <input type="text" id="message-input" placeholder="Type your message...">
                <button id="send-button">Send</button>
            </div>
        </div>
    </div>
    
    
    <script>
        const chatList = document.querySelectorAll(".chat-item");
        const chatWindow = document.getElementById("chat-window");
        const messageInput = document.getElementById("message-input");
        const sendButton = document.getElementById("send-button");
        const chatHeader = document.getElementById("chat-header");
    
        // Dummy data for chats with timestamps
        const chatData = {
            1: [
                { author: "Expert", content: "Hello John! How can I assist you today?", timestamp: new Date().toLocaleTimeString() },
                { author: "Customer", content: "I need help with my router.", timestamp: new Date().toLocaleTimeString() },
            ],
            2: [
                { author: "Expert", content: "Hi Jane! What can I do for you?", timestamp: new Date().toLocaleTimeString() },
                { author: "Customer", content: "I am facing issues with my internet speed.", timestamp: new Date().toLocaleTimeString() },
            ],
            3: [
                { author: "Expert", content: "Hello Alex! What's the problem?", timestamp: new Date().toLocaleTimeString() },
                { author: "Customer", content: "I can't access my account.", timestamp: new Date().toLocaleTimeString() },
            ],
        };
    
        let activeChatId = 1;
    
        // Function to render messages in the chat window
        function renderMessages(chatId) {
            chatWindow.innerHTML = "";
            const chatMessages = chatData[chatId];
    
            chatMessages.forEach((msg) => {
                const messageContainer = document.createElement("div");
                messageContainer.classList.add("message-container");
    
                if (msg.author === "Expert") {
                    messageContainer.innerHTML = ` 
                        <div class="message expert">
                            <div class="author">${msg.author}</div>
                            <p>${msg.content}</p>
                            <div class="timestamp">${msg.timestamp}</div>
                        </div>
                        <div class="spacer"></div>
                    `;
                } else {
                    messageContainer.innerHTML = `
                        <div class="spacer"></div>
                        <div class="message customer">
                            <div class="author">${msg.author}</div>
                            <p>${msg.content}</p>
                            <div class="timestamp">${msg.timestamp}</div>
                        </div>
                    `;
                }
    
                chatWindow.appendChild(messageContainer);
            });
    
            chatWindow.scrollTop = chatWindow.scrollHeight; // Auto-scroll to the latest message
        }
    
        // Function to update the timestamp in the navbar
        function updateNavBarTimestamp(chatId) {
            const chatItem = document.querySelector(`.chat-item[data-chat-id='${chatId}']`);
            const lastMessageTimestamp = chatData[chatId][chatData[chatId].length - 1].timestamp;
    
            const timestampElement = chatItem.querySelector('.timestamp');
    
            // If a timestamp element doesn't exist, create one
            if (!timestampElement) {
                const newTimestamp = document.createElement('span');
                newTimestamp.classList.add('timestamp');
                newTimestamp.textContent = lastMessageTimestamp;
                chatItem.appendChild(newTimestamp);
            } else {
                timestampElement.textContent = lastMessageTimestamp;
            }
        }
    
        // Handle chat item click
        chatList.forEach((item) => {
            item.addEventListener("click", () => {
                chatList.forEach((chat) => chat.classList.remove("active")); // Remove active class from all
                item.classList.add("active"); // Add active class to clicked item
                activeChatId = item.getAttribute("data-chat-id"); // Update active chat ID
                chatHeader.textContent = item.textContent.split(' ')[0]; // Update header with selected chat
                renderMessages(activeChatId); // Render messages for the selected chat
                updateNavBarTimestamp(activeChatId); // Update the timestamp in the navbar
            });
        });
    
        // Send button event listener
        sendButton.addEventListener("click", () => {
            const messageContent = messageInput.value.trim();
            if (messageContent) {
                const timestamp = new Date().toLocaleTimeString();
                chatData[activeChatId].push({ author: "Customer", content: messageContent, timestamp: timestamp }); // Add customer message
                renderMessages(activeChatId);
                messageInput.value = "";
    
                // Simulate Expert response
                setTimeout(() => {
                    const expertResponse = getExpertResponse(messageContent);
                    chatData[activeChatId].push({ author: "Expert", content: expertResponse, timestamp: new Date().toLocaleTimeString() });
                    renderMessages(activeChatId);
                    updateNavBarTimestamp(activeChatId); // Update timestamp in navbar after Expert response
                }, 1000); // Delay for realism
            }
        });
    
        // Generate a response from the Expert (basic logic for now)
        function getExpertResponse(customerMessage) {
            if (customerMessage.toLowerCase().includes("router")) {
                return "Sure! I can help you with your router. What exactly do you need assistance with?";
            }
            return "Thank you for reaching out. Could you please provide more details?";
        }
    
        // Initial rendering of the first chat
        renderMessages(activeChatId);
        updateNavBarTimestamp(activeChatId); // Initial timestamp update in the navbar
    </script>
    
    </x-customernav>
    